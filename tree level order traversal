create linked lists of each depth of a tree, if depth of tree is k then there should be k linked lists



class TreeNode(object):
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        self.nextRight = None
   

class Solution(object): 
    def levelnodes(self,root):

        if not root:
            return None

        q = []
        q.append(root)
        q.append(None)

        while q:
            p = q.pop(0) 
            if p:
                p.nextRight = q[0]

                if p.left:
                    q.append(p.left)

                if p.right:
                    q.append(p.right)

            elif q:
                q.append(None)        



    def testcase(self):
        root = TreeNode(3)
        root.left = TreeNode(2)
        root.right = TreeNode(4)
        root.left.left = TreeNode(3) 
        root.right.right = TreeNode(90) 
        print(self.levelnodes(root))
        print("Following are populated nextRight pointers in \n"
        "the tree (-1 is printed if there is no nextRight) \n") 
        if(root.nextRight != None): 
            print("nextRight of %d is %d \n" %(root.data,root.nextRight.data)) 
        else: 
            print("nextRight of %d is %d \n" %(root.data,-1)) 
        if(root.left.nextRight != None): 
            print("nextRight of %d is %d \n" %(root.left.data,root.left.nextRight.data)) 
        else: 
            print("nextRight of %d is %d \n" %(root.left.data,-1)) 
        if(root.right.nextRight != None): 
            print("nextRight of %d is %d \n" %(root.right.data,root.right.nextRight.data)) 
        else: 
            print("nextRight of %d is %d \n" %(root.right.data,-1)) 
        if(root.left.left.nextRight != None): 
            print("nextRight of %d is %d \n" %(root.left.left.data,root.left.left.nextRight.data)) 
        else: 
            print("nextRight of %d is %d \n" %(root.left.left.data,-1)) 
        if(root.right.right.nextRight != None): 
            print("nextRight of %d is %d \n" %(root.right.right.data,root.right.right.nextRight.data)) 
        else: 
            print("nextRight of %d is %d \n" %(root.right.right.data,-1)) 
          
   

obj=Solution()
obj.testcase()       
                 


        








                    
