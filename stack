Implement queue using two stacks

class MyQueue(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.mystack = []
        self.tempstack = []
        

    def push(self, x):
        """
        Push element x to the back of queue.
        :type x: int
        :rtype: None
        """
        self.mystack.append(x)
        

    def pop(self):
        """
        Removes the element from in front of queue and returns that element.
        :rtype: int
        """
        if not self.tempstack:
            while self.mystack:
                v = self.mystack.pop()
                self.tempstack.append(v)
        top_element = self.tempstack.pop()
        while self.tempstack:
            self.mystack.append(self.tempstack.pop())
        return top_element    
        

    def peek(self):
        """
        Get the front element.
        :rtype: int
        """
        if not self.tempstack:
            while self.mystack:
                self.tempstack.append(self.mystack.pop())
        top_element = self.tempstack.pop()
        self.mystack.append(top_element)
        while self.tempstack:
            self.mystack.append(self.tempstack.pop())
        return(top_element)
        

    def empty(self):
        """
        Returns whether the queue is empty.
        :rtype: bool
        """
        return(not self.mystack)
        


# Your MyQueue object will be instantiated and called as such:
obj = MyQueue()
obj.push(3)
obj.push(4)
obj.push(42)
obj.push(31)
print(obj.pop())
print(obj.peek())
print(obj.empty())
