no. of ways you can make an amount if the coins of different denominations are infinite



# class TreeNode(object):
#     def __init__(self, data):
#         self.data = data
#         self.left = None
#         self.right = None
class Solution(object):
    def change(self,amount, coins):
        dp = [[1] + [0]*amount for _ in range(len(coins)+1)]

        for i in range(1, len(coins)+1):
            for j in range(1, amount+1):
                if coins[i-1] <= j:
                    dp[i][j] = dp[i-1][j] + dp[i][j-coins[i-1]]  
                else:
                    dp[i][j] = dp[i-1][j]           

        return dp[-1][-1]            

            
             

    def testcase(self): 
        # s= "abc"
        amount = 5
        coins = [1,2,5]
        print(self.change(amount, coins))          

        

obj=Solution()
obj.testcase()
