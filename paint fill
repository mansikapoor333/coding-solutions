
# class TreeNode(object):
#     def __init__(self, data):
#         self.data = data
#         self.left = None
#         self.right = None
   
class Solution(object): 
    def floodFill(self, image, sr, sc, newColor):
        R, C = len(image), len(image[0])
        oldcolor = image[sr][sc]
        if oldcolor == newColor: 
            return image
        
        
        def dfs(r, c):
            if image[r][c] == oldcolor:
                image[r][c] = newColor
                if r >= 1: 
                    dfs(r-1, c)
                if r+1 < R:
                    dfs(r+1, c)
                if c >= 1: 
                    dfs(r, c-1)
                if c+1 < C: 
                    dfs(r, c+1)

        dfs(sr, sc)
        return image         


    def testcase(self): 
        image = [[10, 10, 10, 10, 10, 10, 10, 40],
              [30, 20, 20, 10, 10, 40, 40, 40],
              [10, 10, 20, 20, 10, 10, 10, 10],
              [10, 10, 30, 20, 20, 20, 20, 10],
              [40, 40, 10, 10, 10, 10, 10, 10]]
        # sr = 1
        # sc = 1
        # newcolor = 2
        print(self.floodFill(image,1,1,2))          

        

obj=Solution()
obj.testcase()
